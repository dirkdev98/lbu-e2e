// Generated by @lbu/code-gen
/* eslint-disable no-unused-vars */

import { AppError } from "@lbu/stdlib";
import FormData from "form-data";
import * as validators from "./validators.js";

let _internalClient = undefined;
let requestId = undefined;

function checkApiClient() {
  if (_internalClient === undefined) {
    throw new Error("Initialize api client with createApiClient");
  }
}

function handleError(e, group, name) {
  // Validator error
  if (AppError.instanceOf(e)) {
    e.key = `response.${group}.${name}.${e.key}`;
    throw e;
  }
  // Server AppError
  const { key, info } = e.response?.data ?? {};
  if (typeof key === "string" && !!info && typeof info === "object") {
    throw new AppError(key, e.response.status, info, e);
  }
  // Unknown error
  throw new AppError(
    `response.${group}.${name}`,
    e.response?.status ?? 500,
    { data: e?.response?.data, headers: e?.response?.headers },
    e,
  );
}
/**
 * Should set an axios compatible api client
 * @param {AxiosInstance} instance
 */
export function createApiClient(instance) {
  _internalClient = instance;
  _internalClient.interceptors.request.use((config) => {
    if (requestId) {
      config.headers["x-request-id"] = requestId;
    }
    return config;
  });
  _internalClient.interceptors.response.use(
    (response) => {
      if (response.headers["x-request-id"]) {
        requestId = response.headers["x-request-id"];
      }
      return response;
    },
    (error) => {
      if (error.response && error.response.headers["x-request-id"]) {
        requestId = error.response.headers["x-request-id"];
      }
      return Promise.reject(error);
    },
  );
}

export const lbuApi = {
  /**
   * LbuStructure
   * Tags: _lbu
   * Docs: Return the full generated structure as a json object.
   * @returns {Promise<LbuStructureResponse>}
   */
  structure: async function () {
    checkApiClient();
    try {
      const response = await _internalClient.request({
        url: `_lbu/structure.json`,
        method: "get",
        params: {},
        data: {},
      });
      validators.lbuValidators.structureResponse(response.data);
      return response.data;
    } catch (e) {
      handleError(e, "lbu", "structure");
    }
  },
};

export const todoApi = {
  /**
   * TodoAll
   * Docs:
   * @returns {Promise<TodoAllResponse>}
   */
  all: async function () {
    checkApiClient();
    try {
      const response = await _internalClient.request({
        url: `todo/`,
        method: "get",
        params: {},
        data: {},
      });
      validators.todoValidators.allResponse(response.data);
      return response.data;
    } catch (e) {
      handleError(e, "todo", "all");
    }
  },

  /**
   * TodoCreateItem
   * Docs:
   * @param { TodoCreateItemParams_Input } params
   * @param { TodoCreateItemBody_Input } body
   * @returns {Promise<TodoCreateItemResponse>}
   */
  createItem: async function (params, body) {
    checkApiClient();
    const data = body;
    try {
      const response = await _internalClient.request({
        url: `todo/${params.name}/item/`,
        method: "post",
        params: {},
        data: data,
      });
      validators.todoValidators.createItemResponse(response.data);
      return response.data;
    } catch (e) {
      handleError(e, "todo", "createItem");
    }
  },

  /**
   * TodoDelete
   * Docs:
   * @param { TodoDeleteParams_Input } params
   * @returns {Promise<TodoDeleteResponse>}
   */
  delete: async function (params) {
    checkApiClient();
    try {
      const response = await _internalClient.request({
        url: `todo/${params.name}`,
        method: "delete",
        params: {},
        data: {},
      });
      validators.todoValidators.deleteResponse(response.data);
      return response.data;
    } catch (e) {
      handleError(e, "todo", "delete");
    }
  },

  /**
   * TodoNew
   * Docs:
   * @param { TodoNewBody_Input } body
   * @returns {Promise<TodoNewResponse>}
   */
  new: async function (body) {
    checkApiClient();
    const data = body;
    try {
      const response = await _internalClient.request({
        url: `todo/`,
        method: "post",
        params: {},
        data: data,
      });
      validators.todoValidators.newResponse(response.data);
      return response.data;
    } catch (e) {
      handleError(e, "todo", "new");
    }
  },

  /**
   * TodoOne
   * Docs:
   * @param { TodoOneParams_Input } params
   * @returns {Promise<TodoOneResponse>}
   */
  one: async function (params) {
    checkApiClient();
    try {
      const response = await _internalClient.request({
        url: `todo/${params.name}`,
        method: "get",
        params: {},
        data: {},
      });
      validators.todoValidators.oneResponse(response.data);
      return response.data;
    } catch (e) {
      handleError(e, "todo", "one");
    }
  },

  /**
   * TodoToggleItem
   * Docs:
   * @param { TodoToggleItemParams_Input } params
   * @param { TodoToggleItemBody_Input } body
   * @returns {Promise<TodoToggleItemResponse>}
   */
  toggleItem: async function (params, body) {
    checkApiClient();
    const data = body;
    try {
      const response = await _internalClient.request({
        url: `todo/${params.name}/item/toggle`,
        method: "post",
        params: {},
        data: data,
      });
      validators.todoValidators.toggleItemResponse(response.data);
      return response.data;
    } catch (e) {
      handleError(e, "todo", "toggleItem");
    }
  },
};
