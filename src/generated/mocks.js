// Generated by @lbu/code-gen at 2020-05-15T07:15:14.267Z
/* eslint-disable no-unused-vars */

import chance from "chance";

let _mocker = new chance.Chance();

export function setMocker(mocker) {
  if (!(mocker instanceof chance.Chance)) {
    throw new Error("Not instance of Chance.js");
  }

  _mocker = mocker;
}

export const todoMocks = {
  /**
   * Generated mock for TodoList
   * @return { TodoList}
   */
  list: () => {
    return _mocker.pickone([
      {
        name: _mocker.pickone([_mocker.word({})]),
        items: _mocker.pickone([
          Array.from({ length: _mocker.integer({ min: 0, max: 15 }) }, () =>
            _mocker.pickone([todoMocks.item()]),
          ),
        ]),
      },
    ]);
  },

  /**
   * Generated mock for TodoList ignoring default values
   * @return { TodoList_Input}
   */
  listInput: () => {
    return _mocker.pickone([
      {
        name: _mocker.pickone([_mocker.word({})]),
        items: _mocker.pickone([
          Array.from({ length: _mocker.integer({ min: 0, max: 15 }) }, () =>
            _mocker.pickone([todoMocks.itemInput()]),
          ),
        ]),
      },
    ]);
  },

  /**
   * Generated mock for TodoCollection
   * @return { TodoCollection}
   */
  collection: () => {
    return _mocker.pickone([
      Object.fromEntries(
        _mocker.pickone([
          Array.from({ length: _mocker.integer({ min: 2, max: 15 }) }, () => [
            _mocker.pickone([_mocker.word({})]),
            _mocker.pickone([todoMocks.list()]),
          ]),
        ]),
      ),
    ]);
  },

  /**
   * Generated mock for TodoCollection ignoring default values
   * @return { TodoCollection_Input}
   */
  collectionInput: () => {
    return _mocker.pickone([
      Object.fromEntries(
        _mocker.pickone([
          Array.from({ length: _mocker.integer({ min: 2, max: 15 }) }, () => [
            _mocker.pickone([_mocker.word({})]),
            _mocker.pickone([todoMocks.listInput()]),
          ]),
        ]),
      ),
    ]);
  },

  /**
   * Generated mock for TodoItem
   * @return { TodoItem}
   */
  item: () => {
    return _mocker.pickone([
      {
        completed: _mocker.pickone([_mocker.bool(), false]),
        name: _mocker.pickone([_mocker.word({})]),
      },
    ]);
  },

  /**
   * Generated mock for TodoItem ignoring default values
   * @return { TodoItem_Input}
   */
  itemInput: () => {
    return _mocker.pickone([
      {
        completed: _mocker.pickone([_mocker.bool(), undefined]),
        name: _mocker.pickone([_mocker.word({})]),
      },
    ]);
  },

  /**
   * Generated mock for TodoAllResponse
   * @return { TodoAllResponse}
   */
  allResponse: () => {
    return _mocker.pickone([
      { store: _mocker.pickone([todoMocks.collection()]) },
    ]);
  },

  /**
   * Generated mock for TodoAllResponse ignoring default values
   * @return { TodoAllResponse_Input}
   */
  allResponseInput: () => {
    return _mocker.pickone([
      { store: _mocker.pickone([todoMocks.collectionInput()]) },
    ]);
  },

  /**
   * Generated mock for TodoNameParam
   * @return { TodoNameParam}
   */
  nameParam: () => {
    return _mocker.pickone([
      { name: _mocker.pickone([_mocker.word({ min: 0, max: 30 })]) },
    ]);
  },

  /**
   * Generated mock for TodoNameParam ignoring default values
   * @return { TodoNameParam_Input}
   */
  nameParamInput: () => {
    return _mocker.pickone([
      { name: _mocker.pickone([_mocker.word({ min: 0, max: 30 })]) },
    ]);
  },

  /**
   * Generated mock for TodoListResponse
   * @return { TodoListResponse}
   */
  listResponse: () => {
    return _mocker.pickone([{ todo: _mocker.pickone([todoMocks.list()]) }]);
  },

  /**
   * Generated mock for TodoListResponse ignoring default values
   * @return { TodoListResponse_Input}
   */
  listResponseInput: () => {
    return _mocker.pickone([
      { todo: _mocker.pickone([todoMocks.listInput()]) },
    ]);
  },

  /**
   * Generated mock for TodoNewBody
   * @return { TodoNewBody}
   */
  newBody: () => {
    return _mocker.pickone([
      { name: _mocker.pickone([_mocker.word({ min: 1, max: 40 })]) },
    ]);
  },

  /**
   * Generated mock for TodoNewBody ignoring default values
   * @return { TodoNewBody_Input}
   */
  newBodyInput: () => {
    return _mocker.pickone([
      { name: _mocker.pickone([_mocker.word({ min: 1, max: 40 })]) },
    ]);
  },

  /**
   * Generated mock for TodoCreateItemBody
   * @return { TodoCreateItemBody}
   */
  createItemBody: () => {
    return _mocker.pickone([
      { name: _mocker.pickone([_mocker.word({ min: 1, max: 365 })]) },
    ]);
  },

  /**
   * Generated mock for TodoCreateItemBody ignoring default values
   * @return { TodoCreateItemBody_Input}
   */
  createItemBodyInput: () => {
    return _mocker.pickone([
      { name: _mocker.pickone([_mocker.word({ min: 1, max: 365 })]) },
    ]);
  },

  /**
   * Generated mock for TodoToggleItemBody
   * @return { TodoToggleItemBody}
   */
  toggleItemBody: () => {
    return _mocker.pickone([
      { index: _mocker.pickone([_mocker.integer({ min: 0, fixed: 3 })]) },
    ]);
  },

  /**
   * Generated mock for TodoToggleItemBody ignoring default values
   * @return { TodoToggleItemBody_Input}
   */
  toggleItemBodyInput: () => {
    return _mocker.pickone([
      { index: _mocker.pickone([_mocker.integer({ min: 0, fixed: 3 })]) },
    ]);
  },

  /**
   * Generated mock for TodoDeleteResponse
   * @return { TodoDeleteResponse}
   */
  deleteResponse: () => {
    return _mocker.pickone([{ deleted: _mocker.pickone([_mocker.bool()]) }]);
  },

  /**
   * Generated mock for TodoDeleteResponse ignoring default values
   * @return { TodoDeleteResponse_Input}
   */
  deleteResponseInput: () => {
    return _mocker.pickone([{ deleted: _mocker.pickone([_mocker.bool()]) }]);
  },
};

export const unimplementedMocks = {
  /**
   * Generated mock for UnimplementedUser
   * @return { UnimplementedUser}
   */
  user: () => {
    return _mocker.pickone([
      {
        id: _mocker.pickone([_mocker.guid({ version: 4 })]),
        name: _mocker.pickone([_mocker.word({})]),
        age: _mocker.pickone([_mocker.integer({ fixed: 3 })]),
      },
    ]);
  },

  /**
   * Generated mock for UnimplementedUser ignoring default values
   * @return { UnimplementedUser_Input}
   */
  userInput: () => {
    return _mocker.pickone([
      {
        id: _mocker.pickone([_mocker.guid({ version: 4 })]),
        name: _mocker.pickone([_mocker.word({})]),
        age: _mocker.pickone([_mocker.integer({ fixed: 3 })]),
      },
    ]);
  },

  /**
   * Generated mock for UnimplementedSettingsResponse
   * @return { UnimplementedSettingsResponse}
   */
  settingsResponse: () => {
    return _mocker.pickone([
      {
        darkMode: _mocker.pickone([_mocker.bool(), true]),
        preferredNumber: _mocker.pickone([
          _mocker.integer({ min: 0, max: 10, fixed: 3 }),
        ]),
        direction: _mocker.pickone([unimplementedMocks.windDirection()]),
        totalMess: _mocker.pickone([
          Array.from({ length: _mocker.integer({ min: 0, max: 15 }) }, () =>
            _mocker.pickone([
              _mocker.pickone([
                _mocker.integer({ min: 1, max: 150, fixed: 3 }),
                _mocker.floating({ min: 1, max: 150, fixed: 3 }),
                undefined,
              ]),
              _mocker.pickone([_mocker.word({}), new Date().toISOString()]),
              _mocker.pickone([
                Array.from(
                  { length: _mocker.integer({ min: 0, max: 15 }) },
                  () => _mocker.pickone([_mocker.bool(), false]),
                ),
              ]),
              _mocker.pickone([
                { foo: _mocker.pickone([_mocker.bool(), undefined]) },
              ]),
            ]),
          ),
        ]),
      },
    ]);
  },

  /**
   * Generated mock for UnimplementedSettingsResponse ignoring default values
   * @return { UnimplementedSettingsResponse_Input}
   */
  settingsResponseInput: () => {
    return _mocker.pickone([
      {
        darkMode: _mocker.pickone([_mocker.bool(), undefined]),
        preferredNumber: _mocker.pickone([
          _mocker.integer({ min: 0, max: 10, fixed: 3 }),
        ]),
        direction: _mocker.pickone([unimplementedMocks.windDirectionInput()]),
        totalMess: _mocker.pickone([
          Array.from({ length: _mocker.integer({ min: 0, max: 15 }) }, () =>
            _mocker.pickone([
              _mocker.pickone([
                _mocker.integer({ min: 1, max: 150, fixed: 3 }),
                _mocker.floating({ min: 1, max: 150, fixed: 3 }),
                undefined,
              ]),
              _mocker.pickone([_mocker.word({}), undefined]),
              _mocker.pickone([
                Array.from(
                  { length: _mocker.integer({ min: 0, max: 15 }) },
                  () => _mocker.pickone([_mocker.bool(), undefined]),
                ),
              ]),
              _mocker.pickone([
                { foo: _mocker.pickone([_mocker.bool(), undefined]) },
              ]),
            ]),
          ),
        ]),
      },
    ]);
  },

  /**
   * Generated mock for UnimplementedWindDirection
   * @return { UnimplementedWindDirection}
   */
  windDirection: () => {
    return _mocker.pickone(["NORTH", "EAST", "SOUTH", "WEST", "NORTH"]);
  },

  /**
   * Generated mock for UnimplementedWindDirection ignoring default values
   * @return { UnimplementedWindDirection_Input}
   */
  windDirectionInput: () => {
    return _mocker.pickone(["NORTH", "EAST", "SOUTH", "WEST", undefined]);
  },
};

export const lbuMocks = {};
