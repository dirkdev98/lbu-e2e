// Generated by @lbu/code-gen 2020-03-30T17:30:30.878Z

import chance from "chance";

let _mocker = new chance.Chance();

export function setMocker(mocker) {
  if (!(mocker instanceof chance.Chance)) {
    throw new Error("Not instance of Chance.js");
  }

  _mocker = mocker;
}

/**
 * Generated mock for TodoList
 * @return { TodoList}
 */
export function mockTodoList() {
  return {
    name: _mocker.word({}),
    items: Array.from({ length: _mocker.integer({ min: 0, max: 15 }) }, () =>
      mockTodoItem()
    ),
  };
}

/**
 * Generated mock for TodoList ignoring default values
 * @return { TodoList_Optional}
 */
export function mockTodoList_Optional() {
  return {
    name: _mocker.word({}),
    items: Array.from({ length: _mocker.integer({ min: 0, max: 15 }) }, () =>
      mockTodoItem_Optional()
    ),
  };
}

/**
 * Generated mock for TodoCollection
 * @return { TodoCollection}
 */
export function mockTodoCollection() {
  return Object.fromEntries(
    Array.from({ length: _mocker.integer({ min: 2, max: 15 }) }, () => [
      mockTodoList(),
      mockTodoList(),
    ])
  );
}

/**
 * Generated mock for TodoCollection ignoring default values
 * @return { TodoCollection_Optional}
 */
export function mockTodoCollection_Optional() {
  return Object.fromEntries(
    Array.from({ length: _mocker.integer({ min: 2, max: 15 }) }, () => [
      mockTodoList_Optional(),
      mockTodoList_Optional(),
    ])
  );
}

/**
 * Generated mock for TodoAllResponse
 * @return { TodoAllResponse}
 */
export function mockTodoAllResponse() {
  return { store: mockTodoCollection() };
}

/**
 * Generated mock for TodoAllResponse ignoring default values
 * @return { TodoAllResponse_Optional}
 */
export function mockTodoAllResponse_Optional() {
  return { store: mockTodoCollection_Optional() };
}

/**
 * Generated mock for TodoNameParam
 * @return { TodoNameParam}
 */
export function mockTodoNameParam() {
  return { name: _mocker.word({ min: 0, max: 30 }) };
}

/**
 * Generated mock for TodoNameParam ignoring default values
 * @return { TodoNameParam_Optional}
 */
export function mockTodoNameParam_Optional() {
  return { name: _mocker.word({ min: 0, max: 30 }) };
}

/**
 * Generated mock for TodoListResponse
 * @return { TodoListResponse}
 */
export function mockTodoListResponse() {
  return { todo: mockTodoList() };
}

/**
 * Generated mock for TodoListResponse ignoring default values
 * @return { TodoListResponse_Optional}
 */
export function mockTodoListResponse_Optional() {
  return { todo: mockTodoList_Optional() };
}

/**
 * Generated mock for TodoNewBody
 * @return { TodoNewBody}
 */
export function mockTodoNewBody() {
  return { name: "Todo " + _mocker.integer({ min: 0, max: 1000 }) };
}

/**
 * Generated mock for TodoNewBody ignoring default values
 * @return { TodoNewBody_Optional}
 */
export function mockTodoNewBody_Optional() {
  return { name: "Todo " + _mocker.integer({ min: 0, max: 1000 }) };
}

/**
 * Generated mock for TodoCreateItemBody
 * @return { TodoCreateItemBody}
 */
export function mockTodoCreateItemBody() {
  return { name: _mocker.sentence({ words: 6 }) };
}

/**
 * Generated mock for TodoCreateItemBody ignoring default values
 * @return { TodoCreateItemBody_Optional}
 */
export function mockTodoCreateItemBody_Optional() {
  return { name: _mocker.sentence({ words: 6 }) };
}

/**
 * Generated mock for TodoToggleItemBody
 * @return { TodoToggleItemBody}
 */
export function mockTodoToggleItemBody() {
  return { index: _mocker.integer({ min: 0, fixed: 3 }) };
}

/**
 * Generated mock for TodoToggleItemBody ignoring default values
 * @return { TodoToggleItemBody_Optional}
 */
export function mockTodoToggleItemBody_Optional() {
  return { index: _mocker.integer({ min: 0, fixed: 3 }) };
}

/**
 * Generated mock for TodoDeleteResponse
 * @return { TodoDeleteResponse}
 */
export function mockTodoDeleteResponse() {
  return { deleted: _mocker.bool() };
}

/**
 * Generated mock for TodoDeleteResponse ignoring default values
 * @return { TodoDeleteResponse_Optional}
 */
export function mockTodoDeleteResponse_Optional() {
  return { deleted: _mocker.bool() };
}

/**
 * Generated mock for User
 * @return { User}
 */
export function mockUser() {
  return {
    id: _mocker.guid({ version: 4 }),
    name: _mocker.first() + " " + _mocker.last(),
    age: _mocker.age(),
  };
}

/**
 * Generated mock for User ignoring default values
 * @return { User_Optional}
 */
export function mockUser_Optional() {
  return {
    id: _mocker.guid({ version: 4 }),
    name: _mocker.first() + " " + _mocker.last(),
    age: _mocker.age(),
  };
}

/**
 * Generated mock for UnimplementedSettingsResponse
 * @return { UnimplementedSettingsResponse}
 */
export function mockUnimplementedSettingsResponse() {
  return {
    darkMode: _mocker.pickone([_mocker.bool(), true]),
    preferredNumber: _mocker.integer({ min: 0, max: 10, fixed: 3 }),
    direction: mockWindDirection(),
    totalMess: Array.from(
      { length: _mocker.integer({ min: 0, max: 15 }) },
      () =>
        _mocker.pickone([
          _mocker.pickone([
            _mocker.integer({ min: 1, max: 150, fixed: 3 }),
            _mocker.floating({ min: 1, max: 150, fixed: 3 }),
            undefined,
          ]),
          new Date(_mocker.timestamp() * 1000).toISOString(),
          Array.from({ length: _mocker.integer({ min: 0, max: 15 }) }, () =>
            _mocker.pickone([_mocker.bool(), false])
          ),
          { foo: _mocker.pickone([_mocker.bool(), undefined]) },
        ])
    ),
  };
}

/**
 * Generated mock for UnimplementedSettingsResponse ignoring default values
 * @return { UnimplementedSettingsResponse_Optional}
 */
export function mockUnimplementedSettingsResponse_Optional() {
  return {
    darkMode: _mocker.pickone([_mocker.bool(), undefined]),
    preferredNumber: _mocker.integer({ min: 0, max: 10, fixed: 3 }),
    direction: mockWindDirection_Optional(),
    totalMess: Array.from(
      { length: _mocker.integer({ min: 0, max: 15 }) },
      () =>
        _mocker.pickone([
          _mocker.pickone([
            _mocker.integer({ min: 1, max: 150, fixed: 3 }),
            _mocker.floating({ min: 1, max: 150, fixed: 3 }),
            undefined,
          ]),
          new Date(_mocker.timestamp() * 1000).toISOString(),
          Array.from({ length: _mocker.integer({ min: 0, max: 15 }) }, () =>
            _mocker.pickone([_mocker.bool(), undefined])
          ),
          { foo: _mocker.pickone([_mocker.bool(), undefined]) },
        ])
    ),
  };
}

/**
 * Generated mock for TodoItem
 * @return { TodoItem}
 */
export function mockTodoItem() {
  return {
    completed: _mocker.pickone([_mocker.bool(), false]),
    name: _mocker.word({}),
  };
}

/**
 * Generated mock for TodoItem ignoring default values
 * @return { TodoItem_Optional}
 */
export function mockTodoItem_Optional() {
  return {
    completed: _mocker.pickone([_mocker.bool(), undefined]),
    name: _mocker.word({}),
  };
}

/**
 * Generated mock for WindDirection
 * @return { WindDirection}
 */
export function mockWindDirection() {
  return _mocker.pickone(["NORTH", "EAST", "SOUTH", "WEST", "NORTH"]);
}

/**
 * Generated mock for WindDirection ignoring default values
 * @return { WindDirection_Optional}
 */
export function mockWindDirection_Optional() {
  return _mocker.pickone(["NORTH", "EAST", "SOUTH", "WEST", undefined]);
}
