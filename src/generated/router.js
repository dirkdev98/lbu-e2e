/* eslint-disable no-unused-vars */
// Generated by @lbu/code-gen 2020-03-30T17:30:30.875Z

import { getBodyParser, compose, AppError } from "@lbu/server";
import {
  validateTodoNameParam,
  validateTodoNewBody,
  validateTodoCreateItemBody,
  validateTodoToggleItemBody,
} from "./validators.js";

export const taggedMiddleware = {
  _lbu: (ctx, next) => {
    return next();
  },
};

export const groupMiddleware = {
  todo: (ctx, next) => {
    return next();
  },

  unimplemented: (ctx, next) => {
    return next();
  },

  lbu: (ctx, next) => {
    return next();
  },
};

let _internalBodyParser = undefined;
function parseBody(ctx) {
  if (_internalBodyParser === undefined) {
    const bp = getBodyParser();
    _internalBodyParser = (ctx) => new Promise((r) => bp(ctx, r).then(r));
  }

  return _internalBodyParser(ctx);
}

const filterCompose = (...args) =>
  compose(args.filter((it) => it !== undefined));

const _composed = {
  todo_all: undefined,

  todo_one: undefined,

  todo_new: undefined,

  todo_createItem: undefined,

  todo_toggleItem: undefined,

  todo_delete: undefined,

  unimplemented_user: undefined,

  unimplemented_settings: undefined,

  lbu_structure: undefined,
};

const handlers = {
  todo_all: function (params, ctx, next) {
    ctx.request.params = params;

    if (_composed.todo_all === undefined) {
      const curHandler = todoHandlers.all;
      _composed.todo_all = filterCompose(
        groupMiddleware.todo,
        ...(Array.isArray(curHandler) ? curHandler : [curHandler])
      );
    }

    return _composed.todo_all(ctx, next);
  },

  todo_one: function (params, ctx, next) {
    ctx.request.params = params;

    ctx.validatedParams = validateTodoNameParam(params);

    if (_composed.todo_one === undefined) {
      const curHandler = todoHandlers.one;
      _composed.todo_one = filterCompose(
        groupMiddleware.todo,
        ...(Array.isArray(curHandler) ? curHandler : [curHandler])
      );
    }

    return _composed.todo_one(ctx, next);
  },

  todo_new: async function (params, ctx, next) {
    ctx.request.params = params;

    await parseBody(ctx);

    ctx.validatedBody = validateTodoNewBody(ctx.request.body);

    if (_composed.todo_new === undefined) {
      const curHandler = todoHandlers.new;
      _composed.todo_new = filterCompose(
        groupMiddleware.todo,
        ...(Array.isArray(curHandler) ? curHandler : [curHandler])
      );
    }

    return _composed.todo_new(ctx, next);
  },

  todo_createItem: async function (params, ctx, next) {
    ctx.request.params = params;

    ctx.validatedParams = validateTodoNameParam(params);

    await parseBody(ctx);

    ctx.validatedBody = validateTodoCreateItemBody(ctx.request.body);

    if (_composed.todo_createItem === undefined) {
      const curHandler = todoHandlers.createItem;
      _composed.todo_createItem = filterCompose(
        groupMiddleware.todo,
        ...(Array.isArray(curHandler) ? curHandler : [curHandler])
      );
    }

    return _composed.todo_createItem(ctx, next);
  },

  todo_toggleItem: async function (params, ctx, next) {
    ctx.request.params = params;

    ctx.validatedParams = validateTodoNameParam(params);

    await parseBody(ctx);

    ctx.validatedBody = validateTodoToggleItemBody(ctx.request.body);

    if (_composed.todo_toggleItem === undefined) {
      const curHandler = todoHandlers.toggleItem;
      _composed.todo_toggleItem = filterCompose(
        groupMiddleware.todo,
        ...(Array.isArray(curHandler) ? curHandler : [curHandler])
      );
    }

    return _composed.todo_toggleItem(ctx, next);
  },

  todo_delete: function (params, ctx, next) {
    ctx.request.params = params;

    ctx.validatedParams = validateTodoNameParam(params);

    if (_composed.todo_delete === undefined) {
      const curHandler = todoHandlers.delete;
      _composed.todo_delete = filterCompose(
        groupMiddleware.todo,
        ...(Array.isArray(curHandler) ? curHandler : [curHandler])
      );
    }

    return _composed.todo_delete(ctx, next);
  },

  unimplemented_user: function (params, ctx, next) {
    ctx.request.params = params;

    if (_composed.unimplemented_user === undefined) {
      const curHandler = unimplementedHandlers.user;
      _composed.unimplemented_user = filterCompose(
        groupMiddleware.unimplemented,
        ...(Array.isArray(curHandler) ? curHandler : [curHandler])
      );
    }

    return _composed.unimplemented_user(ctx, next);
  },

  unimplemented_settings: function (params, ctx, next) {
    ctx.request.params = params;

    if (_composed.unimplemented_settings === undefined) {
      const curHandler = unimplementedHandlers.settings;
      _composed.unimplemented_settings = filterCompose(
        groupMiddleware.unimplemented,
        ...(Array.isArray(curHandler) ? curHandler : [curHandler])
      );
    }

    return _composed.unimplemented_settings(ctx, next);
  },

  lbu_structure: function (params, ctx, next) {
    ctx.request.params = params;

    if (_composed.lbu_structure === undefined) {
      const curHandler = lbuHandlers.structure;
      _composed.lbu_structure = filterCompose(
        taggedMiddleware._lbu,

        groupMiddleware.lbu,
        ...(Array.isArray(curHandler) ? curHandler : [curHandler])
      );
    }

    return _composed.lbu_structure(ctx, next);
  },
};

export const todoHandlers = {
  /**
   * 
   * Tags: 
   * GET /todo/
   * @param {Object} ctx
   
   * @param { TodoAllResponse } ctx.body
   
   
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  all: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   * 
   * Tags: 
   * GET /todo/:name
   * @param {Object} ctx
   
   * @param { TodoListResponse } ctx.body
   
   
  * @param { TodoNameParam } ctx.validatedParams
  
  
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  one: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   * 
   * Tags: 
   * POST /todo/
   * @param {Object} ctx
   
   * @param { TodoListResponse } ctx.body
   
   
  * @param { TodoNewBody } ctx.validatedBody
  
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  new: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   * 
   * Tags: 
   * POST /todo/:name/item/
   * @param {Object} ctx
   
   * @param { TodoListResponse } ctx.body
   
   
  * @param { TodoNameParam } ctx.validatedParams
  
  
  * @param { TodoCreateItemBody } ctx.validatedBody
  
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  createItem: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   * 
   * Tags: 
   * POST /todo/:name/item/toggle
   * @param {Object} ctx
   
   * @param { TodoListResponse } ctx.body
   
   
  * @param { TodoNameParam } ctx.validatedParams
  
  
  * @param { TodoToggleItemBody } ctx.validatedBody
  
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  toggleItem: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   * 
   * Tags: 
   * DELETE /todo/:name
   * @param {Object} ctx
   
   * @param { TodoDeleteResponse } ctx.body
   
   
  * @param { TodoNameParam } ctx.validatedParams
  
  
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  delete: (ctx, next) => {
    throw AppError.notImplemented();
  },
};

export const unimplementedHandlers = {
  /**
   * 
   * Tags: 
   * GET /unimplemented/user
   * @param {Object} ctx
   
   * @param { User } ctx.body
   
   
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  user: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   * 
   * Tags: 
   * GET /unimplemented/settings
   * @param {Object} ctx
   
   * @param { UnimplementedSettingsResponse } ctx.body
   
   
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  settings: (ctx, next) => {
    throw AppError.notImplemented();
  },
};

export const lbuHandlers = {
  /**
   * Return the full generated structure as a json object.
   * Tags: _lbu
   * GET /_lbu/structure.json
   * @param {Object} ctx
   
   
   * @param {Function} next
   * @returns {void|Promise<void>}
  */
  structure: (ctx, next) => {
    throw AppError.notImplemented();
  },
};

function routeMatcher1(path, params, currentIdx) {
  if (!path.startsWith("GET/unimplemented/settings", currentIdx)) {
    return undefined;
  }

  return handlers.unimplemented_settings;
}

function routeMatcher2(path, params, currentIdx) {
  if (!path.startsWith("GET/_lbu/structure.json", currentIdx)) {
    return undefined;
  }

  return handlers.lbu_structure;
}

function routeMatcher3(path, params, currentIdx) {
  if (!path.startsWith("GET/unimplemented/user", currentIdx)) {
    return undefined;
  }

  return handlers.unimplemented_user;
}

function routeMatcher5(path, params, currentIdx) {
  let subIdx = path.indexOf("/", currentIdx);
  if (subIdx === -1) {
    subIdx = path.length;
  }

  const subPath = path.substring(currentIdx, subIdx);

  params.name = decodeURIComponent(subPath);
  return handlers.todo_delete;
}

function routeMatcher4(path, params, currentIdx) {
  if (!path.startsWith("DELETE/todo", currentIdx)) {
    return undefined;
  }

  const nextIdx = currentIdx + 1 + 11;
  let handler = undefined;

  handler = routeMatcher5(path, params, nextIdx);
  if (handler !== undefined) {
    return handler;
  }

  return undefined;
}

function routeMatcher9(path, params, currentIdx) {
  if (!path.startsWith("toggle", currentIdx)) {
    return undefined;
  }

  return handlers.todo_toggleItem;
}

function routeMatcher8(path, params, currentIdx) {
  if (!path.startsWith("item", currentIdx)) {
    return undefined;
  }

  const nextIdx = currentIdx + 1 + 4;
  let handler = undefined;

  if (path.length === nextIdx - 1) {
    return handlers.todo_createItem;
  }

  handler = routeMatcher9(path, params, nextIdx);
  if (handler !== undefined) {
    return handler;
  }

  return undefined;
}

function routeMatcher7(path, params, currentIdx) {
  let subIdx = path.indexOf("/", currentIdx);
  if (subIdx === -1) {
    subIdx = path.length;
  }

  const subPath = path.substring(currentIdx, subIdx);

  const nextIdx = subIdx + 1;
  let handler = undefined;

  handler = routeMatcher8(path, params, nextIdx);
  if (handler !== undefined) {
    params.name = decodeURIComponent(subPath);
    return handler;
  }

  return undefined;
}

function routeMatcher6(path, params, currentIdx) {
  if (!path.startsWith("POST/todo", currentIdx)) {
    return undefined;
  }

  const nextIdx = currentIdx + 1 + 9;
  let handler = undefined;

  if (path.length === nextIdx - 1) {
    return handlers.todo_new;
  }

  handler = routeMatcher7(path, params, nextIdx);
  if (handler !== undefined) {
    return handler;
  }

  return undefined;
}

function routeMatcher11(path, params, currentIdx) {
  let subIdx = path.indexOf("/", currentIdx);
  if (subIdx === -1) {
    subIdx = path.length;
  }

  const subPath = path.substring(currentIdx, subIdx);

  params.name = decodeURIComponent(subPath);
  return handlers.todo_one;
}

function routeMatcher10(path, params, currentIdx) {
  if (!path.startsWith("GET/todo", currentIdx)) {
    return undefined;
  }

  const nextIdx = currentIdx + 1 + 8;
  let handler = undefined;

  if (path.length === nextIdx - 1) {
    return handlers.todo_all;
  }

  handler = routeMatcher11(path, params, nextIdx);
  if (handler !== undefined) {
    return handler;
  }

  return undefined;
}

export function router(ctx, next) {
  let triePath = ctx.method + ctx.path;
  if (triePath.endsWith("/")) {
    triePath = triePath.substring(0, triePath.length - 1);
  }

  const params = Object.create(null);
  let route = undefined;

  route = routeMatcher1(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }

  route = routeMatcher2(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }

  route = routeMatcher3(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }

  route = routeMatcher4(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }

  route = routeMatcher6(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }

  route = routeMatcher10(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }

  return next();
}

lbuHandlers.structure = (ctx, next) => {
  ctx.set("Content-Type", "application/json");
  ctx.body =
    '{"name":"E2E Todo","models":{"TodoList":{"type":"object","name":"TodoList","optional":false,"keys":{"name":{"type":"string","optional":false,"functionName":"stringValidator15","validator":{}},"items":{"type":"array","optional":false,"values":{"type":"reference","optional":false,"referenceModel":"TodoItem","functionName":"referenceValidator17","validator":{},"reference":"objectValidator0"},"functionName":"arrayValidator16","validator":{}}}},"TodoCollection":{"type":"generic","name":"TodoCollection","optional":false,"keys":{"type":"reference","optional":false,"referenceModel":"TodoList","referenceField":"name","functionName":"referenceValidator18","validator":{},"reference":"stringValidator15"},"values":{"type":"reference","optional":false,"referenceModel":"TodoList","functionName":"referenceValidator19","validator":{},"reference":"objectValidator1"}},"TodoAllResponse":{"type":"object","name":"TodoAllResponse","optional":false,"keys":{"store":{"type":"reference","optional":false,"referenceModel":"TodoCollection","functionName":"referenceValidator20","validator":{},"reference":"genericValidator2"}}},"TodoNameParam":{"type":"object","name":"TodoNameParam","optional":false,"keys":{"name":{"type":"string","optional":false,"validator":{"convert":true,"trim":true,"lowerCase":false,"upperCase":false,"min":0,"max":30},"functionName":"stringValidator21"}}},"TodoListResponse":{"type":"object","name":"TodoListResponse","optional":false,"keys":{"todo":{"type":"reference","optional":false,"referenceModel":"TodoList","functionName":"referenceValidator22","validator":{},"reference":"objectValidator1"}}},"TodoNewBody":{"type":"object","name":"TodoNewBody","optional":false,"keys":{"name":{"type":"string","optional":false,"validator":{"convert":false,"trim":true,"lowerCase":false,"upperCase":false,"min":1,"max":40},"mocks":{"rawMock":"\'Todo \' + _mocker.integer({ min: 0, max: 1000 })"},"functionName":"stringValidator23"}}},"TodoCreateItemBody":{"type":"object","name":"TodoCreateItemBody","optional":false,"keys":{"name":{"type":"string","optional":false,"validator":{"convert":false,"trim":true,"lowerCase":false,"upperCase":false,"min":1,"max":365},"mocks":{"rawMock":"_mocker.sentence({ words: 6 })"},"functionName":"stringValidator24"}}},"TodoToggleItemBody":{"type":"object","name":"TodoToggleItemBody","optional":false,"keys":{"index":{"type":"number","optional":false,"validator":{"convert":true,"integer":true,"min":0},"functionName":"numberValidator25"}}},"TodoDeleteResponse":{"type":"object","name":"TodoDeleteResponse","optional":false,"keys":{"deleted":{"type":"boolean","optional":false,"functionName":"booleanValidator26","validator":{}}}},"User":{"type":"object","name":"User","optional":false,"keys":{"id":{"type":"string","optional":false,"mocks":{"rawMock":"_mocker.guid({ version: 4 })"},"functionName":"stringValidator27","validator":{}},"name":{"type":"string","optional":false,"mocks":{"rawMock":"_mocker.first() + \' \' + _mocker.last()"},"functionName":"stringValidator28","validator":{}},"age":{"type":"number","optional":false,"validator":{"convert":false,"integer":true},"mocks":{"rawMock":"_mocker.age()"},"functionName":"numberValidator29"}}},"UnimplementedSettingsResponse":{"type":"object","name":"UnimplementedSettingsResponse","optional":false,"keys":{"darkMode":{"type":"boolean","optional":true,"default":true,"functionName":"booleanValidator30","validator":{}},"preferredNumber":{"type":"number","optional":false,"validator":{"convert":true,"integer":true,"min":0,"max":10},"functionName":"numberValidator31"},"direction":{"type":"reference","optional":false,"referenceModel":"WindDirection","functionName":"referenceValidator32","validator":{},"reference":"stringValidator11"},"totalMess":{"type":"array","optional":false,"values":{"type":"anyOf","optional":false,"values":[{"type":"number","optional":true,"validator":{"convert":false,"integer":false,"min":1,"max":150},"functionName":"numberValidator35"},{"type":"string","optional":true,"default":"new Date().toISOString()","mocks":{"rawMock":"new Date(_mocker.timestamp() * 1000).toISOString()"},"functionName":"stringValidator36","validator":{}},{"type":"array","optional":false,"values":{"type":"boolean","optional":true,"default":false,"validator":{"convert":true},"functionName":"booleanValidator38"},"functionName":"arrayValidator37","validator":{}},{"type":"object","optional":false,"keys":{"foo":{"type":"boolean","optional":true,"functionName":"booleanValidator40","validator":{}}},"functionName":"objectValidator39","validator":{}}],"functionName":"anyOfValidator34","validator":{}},"functionName":"arrayValidator33","validator":{}}}},"TodoItem":{"type":"object","name":"TodoItem","optional":false,"keys":{"completed":{"type":"boolean","optional":true,"default":false,"functionName":"booleanValidator13","validator":{}},"name":{"type":"string","optional":false,"functionName":"stringValidator14","validator":{}}}},"WindDirection":{"type":"string","name":"WindDirection","optional":true,"default":"\'NORTH\'","oneOf":["NORTH","EAST","SOUTH","WEST"]}},"validators":["TodoList","TodoCollection","TodoAllResponse","TodoNameParam","TodoListResponse","TodoNewBody","TodoCreateItemBody","TodoToggleItemBody","TodoDeleteResponse","User","UnimplementedSettingsResponse"],"routes":[{"method":"GET","group":"todo","name":"all","path":"/todo/","tags":[],"docs":"","responseModel":"TodoAllResponse"},{"method":"GET","group":"todo","name":"one","path":"/todo/:name","tags":[],"docs":"","paramsValidator":"TodoNameParam","responseModel":"TodoListResponse"},{"method":"POST","group":"todo","name":"new","path":"/todo/","tags":[],"docs":"","bodyValidator":"TodoNewBody","responseModel":"TodoListResponse"},{"method":"POST","group":"todo","name":"createItem","path":"/todo/:name/item/","tags":[],"docs":"","paramsValidator":"TodoNameParam","bodyValidator":"TodoCreateItemBody","responseModel":"TodoListResponse"},{"method":"POST","group":"todo","name":"toggleItem","path":"/todo/:name/item/toggle","tags":[],"docs":"","paramsValidator":"TodoNameParam","bodyValidator":"TodoToggleItemBody","responseModel":"TodoListResponse"},{"method":"DELETE","group":"todo","name":"delete","path":"/todo/:name","tags":[],"docs":"","paramsValidator":"TodoNameParam","responseModel":"TodoDeleteResponse"},{"method":"GET","group":"unimplemented","name":"user","path":"/unimplemented/user","tags":[],"docs":"","responseModel":"User"},{"method":"GET","group":"unimplemented","name":"settings","path":"/unimplemented/settings","tags":[],"docs":"","responseModel":"UnimplementedSettingsResponse"},{"method":"GET","group":"lbu","name":"structure","path":"/_lbu/structure.json","tags":["_lbu"],"docs":"Return the full generated structure as a json object."}],"routeTags":["_lbu"],"routeGroups":["todo","unimplemented","lbu"]}';

  return next();
};
