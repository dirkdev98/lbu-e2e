// Generated by @lbu/code-gen
/* eslint-disable no-unused-vars */

import { compose } from "@lbu/server";
import { AppError } from "@lbu/stdlib";
import { structureString } from "./structure.js";
import { lbuValidators, todoValidators } from "./validators.js";

let internalBodyParsers = undefined;
/**
 * @param {BodyParserPair} parsers
 */
export function setBodyParsers(parsers) {
  internalBodyParsers = {
    body: (ctx) =>
      new Promise((r) => {
        parsers.bodyParser(ctx, r).then(r);
      }),
    files: (ctx) =>
      new Promise((r) => {
        parsers.multipartBodyParser(ctx, r).then(r);
      }),
  };
}

const filterCompose = (...args) =>
  compose(args.filter((it) => it !== undefined));

/**
 * @name GroupMiddleware
 * @typedef {object}
 * @property {Middleware|Middleware[]|undefined} lbu
 * @property {Middleware|Middleware[]|undefined} todo
 */
/**
 * @type {GroupMiddleware}
 */
export const groupMiddleware = {
  lbu: undefined,
  todo: undefined,
};

const _composed = {
  LbuStructure: undefined,
  TodoAll: undefined,
  TodoCreateItem: undefined,
  TodoDelete: undefined,
  TodoNew: undefined,
  TodoOne: undefined,
  TodoToggleItem: undefined,
};

const handlers = {
  LbuStructure: function (params, ctx, next) {
    ctx.request.params = params;
    if (_composed.LbuStructure === undefined) {
      const currentHandler = lbuHandlers.structure;
      _composed.LbuStructure = filterCompose(
        ...(Array.isArray(groupMiddleware.lbu)
          ? groupMiddleware.lbu
          : [groupMiddleware.lbu]),
        ...(Array.isArray(currentHandler) ? currentHandler : [currentHandler]),
      );
    }
    return _composed.LbuStructure(ctx, next);
  },

  TodoAll: function (params, ctx, next) {
    ctx.request.params = params;
    if (_composed.TodoAll === undefined) {
      const currentHandler = todoHandlers.all;
      _composed.TodoAll = filterCompose(
        ...(Array.isArray(groupMiddleware.todo)
          ? groupMiddleware.todo
          : [groupMiddleware.todo]),
        ...(Array.isArray(currentHandler) ? currentHandler : [currentHandler]),
      );
    }
    return _composed.TodoAll(ctx, next);
  },

  TodoCreateItem: async function (params, ctx, next) {
    ctx.request.params = params;
    ctx.validatedParams = todoValidators.createItemParams(params);
    await internalBodyParsers.body(ctx);
    ctx.validatedBody = todoValidators.createItemBody(ctx.request.body);
    if (_composed.TodoCreateItem === undefined) {
      const currentHandler = todoHandlers.createItem;
      _composed.TodoCreateItem = filterCompose(
        ...(Array.isArray(groupMiddleware.todo)
          ? groupMiddleware.todo
          : [groupMiddleware.todo]),
        ...(Array.isArray(currentHandler) ? currentHandler : [currentHandler]),
      );
    }
    return _composed.TodoCreateItem(ctx, next);
  },

  TodoDelete: function (params, ctx, next) {
    ctx.request.params = params;
    ctx.validatedParams = todoValidators.deleteParams(params);
    if (_composed.TodoDelete === undefined) {
      const currentHandler = todoHandlers.delete;
      _composed.TodoDelete = filterCompose(
        ...(Array.isArray(groupMiddleware.todo)
          ? groupMiddleware.todo
          : [groupMiddleware.todo]),
        ...(Array.isArray(currentHandler) ? currentHandler : [currentHandler]),
      );
    }
    return _composed.TodoDelete(ctx, next);
  },

  TodoNew: async function (params, ctx, next) {
    ctx.request.params = params;
    await internalBodyParsers.body(ctx);
    ctx.validatedBody = todoValidators.newBody(ctx.request.body);
    if (_composed.TodoNew === undefined) {
      const currentHandler = todoHandlers.new;
      _composed.TodoNew = filterCompose(
        ...(Array.isArray(groupMiddleware.todo)
          ? groupMiddleware.todo
          : [groupMiddleware.todo]),
        ...(Array.isArray(currentHandler) ? currentHandler : [currentHandler]),
      );
    }
    return _composed.TodoNew(ctx, next);
  },

  TodoOne: function (params, ctx, next) {
    ctx.request.params = params;
    ctx.validatedParams = todoValidators.oneParams(params);
    if (_composed.TodoOne === undefined) {
      const currentHandler = todoHandlers.one;
      _composed.TodoOne = filterCompose(
        ...(Array.isArray(groupMiddleware.todo)
          ? groupMiddleware.todo
          : [groupMiddleware.todo]),
        ...(Array.isArray(currentHandler) ? currentHandler : [currentHandler]),
      );
    }
    return _composed.TodoOne(ctx, next);
  },

  TodoToggleItem: async function (params, ctx, next) {
    ctx.request.params = params;
    ctx.validatedParams = todoValidators.toggleItemParams(params);
    await internalBodyParsers.body(ctx);
    ctx.validatedBody = todoValidators.toggleItemBody(ctx.request.body);
    if (_composed.TodoToggleItem === undefined) {
      const currentHandler = todoHandlers.toggleItem;
      _composed.TodoToggleItem = filterCompose(
        ...(Array.isArray(groupMiddleware.todo)
          ? groupMiddleware.todo
          : [groupMiddleware.todo]),
        ...(Array.isArray(currentHandler) ? currentHandler : [currentHandler]),
      );
    }
    return _composed.TodoToggleItem(ctx, next);
  },
};

/**
 * @name LbuStructureCtx
 * @typedef {object & Context}
 * @property {Logger} log
 * @property { LbuStructureResponse } body
 */

/**
 * @callback LbuStructureFn
 * @param { LbuStructureCtx} ctx
 * @param {Function} next
 * @returns {void|Promise<void>}
 */

/**
 * @name TodoAllCtx
 * @typedef {object & Context}
 * @property {Logger} log
 * @property { TodoAllResponse } body
 */

/**
 * @callback TodoAllFn
 * @param { TodoAllCtx} ctx
 * @param {Function} next
 * @returns {void|Promise<void>}
 */

/**
 * @name TodoCreateItemCtx
 * @typedef {object & Context}
 * @property {Logger} log
 * @property { TodoCreateItemResponse } body
 * @property { TodoCreateItemParams } validatedParams
 * @property { TodoCreateItemBody } validatedBody
 */

/**
 * @callback TodoCreateItemFn
 * @param { TodoCreateItemCtx} ctx
 * @param {Function} next
 * @returns {void|Promise<void>}
 */

/**
 * @name TodoDeleteCtx
 * @typedef {object & Context}
 * @property {Logger} log
 * @property { TodoDeleteResponse } body
 * @property { TodoDeleteParams } validatedParams
 */

/**
 * @callback TodoDeleteFn
 * @param { TodoDeleteCtx} ctx
 * @param {Function} next
 * @returns {void|Promise<void>}
 */

/**
 * @name TodoNewCtx
 * @typedef {object & Context}
 * @property {Logger} log
 * @property { TodoNewResponse } body
 * @property { TodoNewBody } validatedBody
 */

/**
 * @callback TodoNewFn
 * @param { TodoNewCtx} ctx
 * @param {Function} next
 * @returns {void|Promise<void>}
 */

/**
 * @name TodoOneCtx
 * @typedef {object & Context}
 * @property {Logger} log
 * @property { TodoOneResponse } body
 * @property { TodoOneParams } validatedParams
 */

/**
 * @callback TodoOneFn
 * @param { TodoOneCtx} ctx
 * @param {Function} next
 * @returns {void|Promise<void>}
 */

/**
 * @name TodoToggleItemCtx
 * @typedef {object & Context}
 * @property {Logger} log
 * @property { TodoToggleItemResponse } body
 * @property { TodoToggleItemParams } validatedParams
 * @property { TodoToggleItemBody } validatedBody
 */

/**
 * @callback TodoToggleItemFn
 * @param { TodoToggleItemCtx} ctx
 * @param {Function} next
 * @returns {void|Promise<void>}
 */

/**
 * @type { {
 * structure: (LbuStructureFn|LbuStructureFn[]),
 * } }
 */
export const lbuHandlers = {
  /**
   * Return the full generated structure as a json object.
   * Tags: _lbu
   * GET _lbu/structure.json
   */
  structure: (ctx, next) => {
    throw AppError.notImplemented();
  },
};

export const lbuTags = {
  structure: ["_lbu"],
};

/**
 * @type { {
 * all: (TodoAllFn|TodoAllFn[]),
 * createItem: (TodoCreateItemFn|TodoCreateItemFn[]),
 * delete: (TodoDeleteFn|TodoDeleteFn[]),
 * new: (TodoNewFn|TodoNewFn[]),
 * one: (TodoOneFn|TodoOneFn[]),
 * toggleItem: (TodoToggleItemFn|TodoToggleItemFn[]),
 * } }
 */
export const todoHandlers = {
  /**
   *
   * GET todo/
   */
  all: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   *
   * POST todo/:name/item/
   */
  createItem: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   *
   * DELETE todo/:name
   */
  delete: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   *
   * POST todo/
   */
  new: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   *
   * GET todo/:name
   */
  one: (ctx, next) => {
    throw AppError.notImplemented();
  },

  /**
   *
   * POST todo/:name/item/toggle
   */
  toggleItem: (ctx, next) => {
    throw AppError.notImplemented();
  },
};

export const todoTags = {
  all: [],

  createItem: [],

  delete: [],

  new: [],

  one: [],

  toggleItem: [],
};

export function router(ctx, next) {
  let triePath = ctx.method + ctx.path;
  if (triePath.endsWith("/")) {
    triePath = triePath.substring(0, triePath.length - 1);
  }
  const params = Object.create(null);
  let route = undefined;
  route = routeMatcher0(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }
  route = routeMatcher1(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }
  route = routeMatcher3(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }
  route = routeMatcher7(triePath, params, 0);
  if (route !== undefined) {
    return route(params, ctx, next);
  }
  return next();
}

lbuHandlers.structure = (ctx, next) => {
  ctx.set("Content-Type", "application/json");
  ctx.body = structureString;
  return next();
};

function routeMatcher0(path, params, currentIdx) {
  if (!path.startsWith("GET/_lbu/structure.json", currentIdx)) {
    return undefined;
  }
  return handlers.LbuStructure;
}
function routeMatcher2(path, params, currentIdx) {
  let subIdx = path.indexOf("/", currentIdx);
  if (subIdx === -1) {
    subIdx = path.length;
  }
  const subPath = path.substring(currentIdx, subIdx);
  params.name = decodeURIComponent(subPath);
  return handlers.TodoDelete;
}
function routeMatcher1(path, params, currentIdx) {
  if (!path.startsWith("DELETE/todo", currentIdx)) {
    return undefined;
  }
  const nextIdx = currentIdx + 1 + 11;
  let handler = undefined;
  handler = routeMatcher2(path, params, nextIdx);
  if (handler !== undefined) {
    return handler;
  }
  return undefined;
}
function routeMatcher6(path, params, currentIdx) {
  if (!path.startsWith("toggle", currentIdx)) {
    return undefined;
  }
  return handlers.TodoToggleItem;
}
function routeMatcher5(path, params, currentIdx) {
  if (!path.startsWith("item", currentIdx)) {
    return undefined;
  }
  const nextIdx = currentIdx + 1 + 4;
  let handler = undefined;
  if (path.length === nextIdx - 1) {
    return handlers.TodoCreateItem;
  }
  handler = routeMatcher6(path, params, nextIdx);
  if (handler !== undefined) {
    return handler;
  }
  return undefined;
}
function routeMatcher4(path, params, currentIdx) {
  let subIdx = path.indexOf("/", currentIdx);
  if (subIdx === -1) {
    subIdx = path.length;
  }
  const subPath = path.substring(currentIdx, subIdx);
  const nextIdx = subIdx + 1;
  let handler = undefined;
  handler = routeMatcher5(path, params, nextIdx);
  if (handler !== undefined) {
    params.name = decodeURIComponent(subPath);
    return handler;
  }
  return undefined;
}
function routeMatcher3(path, params, currentIdx) {
  if (!path.startsWith("POST/todo", currentIdx)) {
    return undefined;
  }
  const nextIdx = currentIdx + 1 + 9;
  let handler = undefined;
  if (path.length === nextIdx - 1) {
    return handlers.TodoNew;
  }
  handler = routeMatcher4(path, params, nextIdx);
  if (handler !== undefined) {
    return handler;
  }
  return undefined;
}
function routeMatcher8(path, params, currentIdx) {
  let subIdx = path.indexOf("/", currentIdx);
  if (subIdx === -1) {
    subIdx = path.length;
  }
  const subPath = path.substring(currentIdx, subIdx);
  params.name = decodeURIComponent(subPath);
  return handlers.TodoOne;
}
function routeMatcher7(path, params, currentIdx) {
  if (!path.startsWith("GET/todo", currentIdx)) {
    return undefined;
  }
  const nextIdx = currentIdx + 1 + 8;
  let handler = undefined;
  if (path.length === nextIdx - 1) {
    return handlers.TodoAll;
  }
  handler = routeMatcher8(path, params, nextIdx);
  if (handler !== undefined) {
    return handler;
  }
  return undefined;
}
